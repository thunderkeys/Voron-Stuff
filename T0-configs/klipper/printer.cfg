## LDO V0.2 Printer Configuration
## NOTE: The order of the [include] are IMPORTANT


#####################################################################
#   User Interface Software
#####################################################################
## Uncomment depending on your software choice either Fluidd or Mainsail
# [include fluidd.cfg]
[include mainsail.cfg]
#[include V0Display.cfg]
[include mini12864.cfg]
[include DisplayMenu.cfg]
[include leviathan.cfg]
[include toolhead_btt_ebbcan_G0B1_v1.2.cfg]
[include macros.cfg]
[include klicky/klicky-probe.cfg]
[include KAMP_Settings.cfg]

# Enable pause/resume
[pause_resume]

[respond]

# Enable object exclusion
[exclude_object]

# Enable arcs support
[gcode_arcs]
resolution: 0.1


[mcu]
canbus_uuid: fa09b1a1a54f

#####################################################################
#   Main Controller Board
#####################################################################
# This file contains common pin mappings for the BIGTREETECH SKR Pico V1.0
# To use this config, the firmware should be compiled for the RP2040 with
# USB communication.

# The "make flash" command does not work on the SKR Pico V1.0. Instead,
# after running "make", copy the generated "out/klipper.uf2" file
# to the mass storage device in RP2040 boot mode

## Voron Design VORON 0.1 SKR Pico V1.0 config

## *** THINGS TO CHANGE/CHECK: ***
## MCU path                                                                     [mcu] section
## Z and Extruder motor currents                                                [tmc2209 stepper_*] sections. Uncomment the stepper motor you have
## Full steps per rotation for Extruder                                         [extruder] section
## Thermistor types                                                             [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Extruder motor currents                                                      [extruder] section
## PID tune                                                                     [extruder] and [heater_bed] sections
## Fine tune E steps                                                            [extruder] section
## For more info                                                                check https://docs.vorondesign.com/build/startup/#v0

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 10000
max_z_velocity: 15
max_z_accel: 45
square_corner_velocity: 6.0

#####################################################################
#      X/Y Stepper Settings
#####################################################################

[stepper_x]
step_pin: HV_STEP0_STEP
dir_pin: !HV_STEP0_DIR                                                     # Add ! if moving opposite direction
enable_pin: !HV_STEP0_EN
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 200                                        # Set to 400 for 0.9° degree stepper motor, 200 is for 1.8° stepper motors
position_endstop: 120
position_max: 120
homing_positive_dir: true
endstop_pin: tmc5160_stepper_x:virtual_endstop
homing_speed: 40
homing_retract_dist: 0

[tmc5160 stepper_x]

cs_pin: HV_STEP0_CS
spi_bus: spi4
diag0_pin: ^!HV_STEP0_DIAG
run_current: 0.8     # For V0.1 spec NEMA14 40Ncm
interpolate: False
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle
driver_SGT: 3  #Tune this, use the highest value that will not cause a false trigger

[stepper_y]
step_pin: HV_STEP1_STEP
dir_pin: !HV_STEP1_DIR
enable_pin: !HV_STEP1_EN
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 200                                        # Set to 400 for 0.9° degree stepper motor, 200 is for 1.8° stepper motors
position_endstop: 120
position_max: 120
homing_positive_dir: true
endstop_pin: tmc5160_stepper_y:virtual_endstop
homing_speed: 41
homing_retract_dist: 0

[tmc5160 stepper_y]
cs_pin: HV_STEP1_CS
spi_bus: spi4
diag0_pin: ^!HV_STEP1_DIAG
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle

driver_SGT: 3  #Tune this, use the highest value that will not cause a false trigger

#####################################################################
#   Z Stepper Settings
#####################################################################

[stepper_z]
step_pin: STEP2_STEP 
dir_pin: STEP2_DIR
enable_pin: !STEP2_EN
rotation_distance: 32
microsteps: 32
endstop_pin: probe:z_virtual_endstop
position_max: 120
position_min: -1.5
homing_speed: 15
second_homing_speed: 3.0
homing_retract_dist: 3.0

[tmc2209 stepper_z]
uart_pin: STEP2_UART
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_z1]
step_pin: STEP3_STEP
dir_pin: !STEP3_DIR
enable_pin: !STEP3_EN
rotation_distance: 32
microsteps: 32

[tmc2209 stepper_z1]
uart_pin: STEP3_UART
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_z2]
step_pin: STEP4_STEP
dir_pin: !STEP4_DIR
enable_pin: !STEP4_EN
rotation_distance: 32
microsteps: 32

[tmc2209 stepper_z2]
uart_pin: STEP4_UART
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Extruder
#####################################################################

[extruder]
step_pin: can0:EXT_STEP
dir_pin: can0:EXT_DIR
enable_pin: !can0:EXT_EN
full_steps_per_rotation: 200                                       # Set to 200 for LDO 1.8° stepper motor, and set to 400 for OMC(StepperOnline) 0.9° stepper motor

#rotation_distance: 22.23                                            # See calibrating rotation_distance on extruders doc
#rotation_distance: 23.132529  # 22.67895
#gear_ratio: 50:10                                                   # For Mini Afterburner
#microsteps: 32

# g2sa
rotation_distance: 47.088
gear_ratio: 9:1
microsteps: 16

nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: can0:HE0
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
sensor_type: ATC Semitec 104GT-2                        
sensor_pin: can0:TH0 
pullup_resistor: 2200
#control: pid                                                        # Do PID calibration after initial checks
#pid_Kp: 28.182
#pid_Ki: 1.978
#pid_Kd: 100.397
min_temp: 0
max_temp: 305
min_extrude_temp: 170
max_extrude_only_distance: 150
max_extrude_cross_section: 5
pressure_advance: 0.0                                               # See tuning pressure advance doc
pressure_advance_smooth_time: 0.040

[tmc2209 extruder]
uart_pin: can0:EXT_UART
interpolate: False
run_current: 0.6 # for LDO 36STH20-1004AHG
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 0 for spreadcycle, avoid using stealthchop on extruder

#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
heater_pin: HEATBED_PWM
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: ATC Semitec 104NT-4-R025H42G 
sensor_pin: TH1
pullup_resistor: 2200
smooth_time: 3.0
#max_power: 0.6                                                     # Only needed for 100w pads
min_temp: 0
max_temp: 120
#control: pid                                                        # Do PID calibration after initial checks
#pid_kp: 68.453
#pid_ki: 2.749
#pid_kd: 426.122

#####################################################################
# Fan Control
#####################################################################

[heater_fan hotend_fan]
pin: can0:FAN0                                                      # LDO Picobilical overrides this setting
max_power: 1.0
kick_start_time: 0.5
heater: extruder                                                    # LDO Picobilical overrides this setting
heater_temp: 50.0                                                   # LDO Picobilical overrides this setting
#fan_speed: 1.0                                                     # You can't PWM the delta fan unless using blue wire

[fan]
pin: can0:FAN1                                                         # LDO Picobilical overrides this setting
max_power: 1.0
kick_start_time: 0.5                                                # Depending on your fan, you may need to increase this value if your fan will not start
off_below: 0.13
cycle_time: 0.010

;[controller_fan pcb_fan]                                            # Optional fan for cooling your PCBs
;pin: FAN2_PWM
;max_power: 0.6
;kick_start_time: 0.5                                                
;heater: heater_bed

[temperature_fan controller_fan]
# Electronics fan PWM
pin: FAN2_PWM
max_power: 0.60
hardware_pwm: true
control: watermark
max_delta: 2
sensor_type: temperature_host
min_temp: 10
max_temp: 80
target_temp: 50

[output_pin nevermore]
pin: FAN3_PWM
value: 0
shutdown_value: 0

#####################################################################
# Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

# Uncomment this section if you are using physical endstops
# [safe_z_home]
# home_xy_position: 120,120
# speed: 50.0
# z_hop: 5

[z_tilt]
z_positions:
  -47.5, 15
  60, 141
  167.5, 15
points:
  5,5
  38,110
  90,5
speed: 200
retries: 4
#retry_tolerance: 0.0075
retry_tolerance: 0.01
horizontal_move_z: 25 

#####################################################################
#   LDO Picobilical
#####################################################################
## Comment for the secondary controller board 
# This file contains pin mappings for the LDO V0 Kit using the LDO Picobilical as a secondary controller.
# To use this config, the firmware should be compiled for the Raspberry Pi RP2040

# after running "make", copy the generated "klipper/out/klipper.uf2" firmware file 
# reboot the picobilical controller into BOOTSEL mode while connected to a PC, and copy the firmware file into the controller

## Voron Design VORON0 x LDO Picobilical partial config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] sections

## *MAKE SURE* to include this partial config file *AFTER* the main controller config. 
## This will ensure the relavent sections are overwritten by the picobilical mappings specified here.

#####################################################################
#   X Stepper Settings
#####################################################################

#####################################################################
#   Extruder
#####################################################################

#####################################################################
#   Fan Control
#####################################################################

[output_pin caselight]
pin: LED_PWM
pwm: True
cycle_time: 0.01
value: 0.1


#####################################################################
#   Neopixels
#####################################################################

## Neopixel 1 - Frame PCB
#[neopixel rgb1]
#pin: NEOPIXEL_DATA
#chain_count: 3
#color_order: GRB
#initial_RED: 0.3
#initial_GREEN: 0.3
#initial_BLUE: 0.3

#[gcode_macro M300]
#description: Custom M300 code to allow beeper to be used in gcode
#gcode:
#    {% set TIME_MS = params.P|default(100)|float %}
#    SET_PIN PIN=beeper VALUE=1
#    G4 P{TIME_MS}
#    SET_PIN PIN=beeper VALUE=0

#####################################################################
#   Additional Sensors
#####################################################################

[thermistor CMFB103F3950FANT]
temperature1: 0.0
resistance1: 32116.0
temperature2: 40.0
resistance2: 5309.0
temperature3: 80.0
resistance3: 1228.0

## Chamber thermistor
[temperature_sensor chamber_temp]
sensor_type: Generic 3950
sensor_pin: TH2
pullup_resistor: 2200
min_temp: 0
max_temp: 100
gcode_id: chamber_th

[temperature_sensor rpi4]
sensor_type: temperature_host
min_temp: 0
max_temp: 100

[temperature_sensor leviathan]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

# slideswipe
[probe]
pin: ^can0:LIMIT_3
x_offset: 22
y_offset: -2
#z_offset: 17.105
speed: 20.0
samples: 2
sample_retract_dist: 5.0
lift_speed: 30.0
samples_tolerance: 0.01
samples_tolerance_retries: 15
deactivate_on_each_sample: 0


[mcu rpi]
serial: /tmp/klipper_host_mcu

#####################################################################
#   Filament Runout Sensor
#####################################################################

[filament_switch_sensor Filament_Runout_Sensor]
pause_on_runout: True
runout_gcode: PAUSE
switch_pin: FIL_SENSOR

## Sensorless Homing
## This file contains configuration and macros pertaining to sensorless homing for the Voron 0.2 
## It is based on this guide: https://docs.vorondesign.com/community/howto/clee/sensorless_xy_homing.html

## *MAKE SURE* to include this config file *AFTER* the main controller config. 
## This will ensure the relavent sections are overwritten by the configurations specified here.

## If using SKR Pico or SKR mini E3 mainboards, make sure to set the X-DIAG and Y-DIAG jumpers to enable sensorless homing
## See here https://github.com/bigtreetech/SKR-Pico/blob/master/Hardware/BTT%20SKR%20Pico%20V1.0-PIN.pdf


[gcode_macro T0]
gcode:
  M600

[gcode_macro T1]
gcode:
  M600

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.49 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    SAVE_GCODE_STATE NAME=STATE_HOME_X

    # Home
    G28 X
    # Move away
    G91
    G1 X-5 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P500
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    RESTORE_GCODE_STATE NAME=STATE_HOME_X

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.49 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    SAVE_GCODE_STATE NAME=STATE_HOME_Y

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-5 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P500
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    RESTORE_GCODE_STATE NAME=STATE_HOME_Y

[gcode_macro PRINT_START]
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:
    {% set target_bed = params.BED|default("60")|int %}
    {% set target_extruder = params.EXTRUDER|default("200")|int %}
    {% set target_chamber = params.CHAMBER|default("20")|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    # Disable any pending auto-off
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0
    SET_PIN PIN=caselight VALUE=0.1                     ; turn on case light

    BED_MESH_CLEAR

    M117 Homing...                 ; display message
    G28 PROBE_LOCK=true                          ; home X Y

    SET_FILAMENT_SENSOR SENSOR=Filament_Runout_Sensor ENABLE=1
   
    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 90 %}
      SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
      #STATUS_HEATING                                      # Sets SB-leds to heating-mode

      G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    
      M190 S{target_bed}                                  # Sets the target temp for the bed
      M104 S150                                           # Turn on extruder to 150c   
      M106 S255                                           # Turns on the PT-fan

      SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

    # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
    {% else %}
      SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
      #STATUS_HEATING                                      # Sets SB-leds to heating-mode
      G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
      M190 S{target_bed}                                  # Sets the target temp for the bed
    {% endif %}

    #M109 S150                                    # Heats the nozzle to 150c

    SET_DISPLAY_TEXT MSG="Performing Z-Tilt Adjust"
    Z_TILT_ADJUST

    SET_DISPLAY_TEXT MSG="Performing bed mesh"
    BED_MESH_CALIBRATE ADAPTIVE=1

    Dock_Probe_Unlock

    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
    #STATUS_HEATING                                                # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
    M107                                                          # Turns off partcooling fan
    M109 S{target_extruder}                                       # Heats the nozzle to printing temp

    SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info

    SET_DISPLAY_TEXT MSG="Printing purge line"             # Displays info

    LINE_PURGE
    #PRIME_LINE

#    G1 X5 Y2 F3000                      # Moves to starting point
#    G1 Z2 F240

#    G0 Z0.4                                          # Raises Z to 0.4
#    G91                                              # Incremental positioning
#    G1 E8  # purge bubble
#    G1 X80 E25 F1000                                # Purge line

#    G90                            ; absolute positioning    
#    G1 Z5 F3000                   ; move nozzle away from bed

    SET_DISPLAY_TEXT MSG="Printer goes brrr"             # Displays info 
   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float - 10 %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y} F3600          ; park nozzle at rear

      ##  Uncomment if you have a Nevermore.
      SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    SET_FILAMENT_SENSOR SENSOR=Filament_Runout_Sensor ENABLE=0

    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600    ; turn everything off in 10 min

    M117
    SET_DISPLAY_TEXT MSG=""

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=Filament_Runout_Sensor ENABLE=0

[delayed_gcode DELAYED_OFF]
gcode:
    {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
        OFF ; if not printing, call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
    {% endif %}

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, lights)
[gcode_macro OFF]
gcode:
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    SET_PIN PIN=nevermore VALUE=0        ; turn nevermore off
    SET_FILAMENT_SENSOR SENSOR=Filament_Runout_Sensor ENABLE=0
    M107                                 ; turn print cooling fan off

[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(110)|int %}
    {% set c = params.C|default(50)|int %}
    {% set move = params.MOVE|default(1)|int %}
    {% set wait = params.WAIT|default(0)|int %}

    SAVE_GCODE_STATE NAME=HEATSOAK

    SET_IDLE_TIMEOUT TIMEOUT=7200
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0    ; cancel off timer (if there is one)
    SET_PIN PIN=caselight VALUE=0.1                     ; turn on case light
    M104 S150                                         ; set hotend to 150C
    M140 S{t}                                         ; heat bed
    SET_PIN PIN=nevermore VALUE=1                     ; start nevermore
    {% if move == 1 %}
        #STATUS_HEATING
        #SET_NOZZLE_LEDS_OFF
        CHOME
        G90
        G0 Z{printer.toolhead.axis_maximum.z/2} F19500    
        G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500    
    {% endif %}
    {% if c > 30 and wait == 1 %}
        #TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={c-10} ; (TEST) wait for chamber temp - 10C
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={c} ; wait for chamber temp
    {% endif %}
    RESTORE_GCODE_STATE NAME=HEATSOAK


[gcode_macro CHOME]
description: Homes XYZ axis only if printer is in a non-homed state
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  SET_FILAMENT_SENSOR SENSOR=Filament_Runout_Sensor ENABLE=0
  #CHOME
  #{% if printer.toolhead.position.z < (max_z - 20) %}
  #  G91                         ; relative positioning
  #  G1 Z20                      ; move nozzle upwards
  #  G90  
  #{% endif %}
  FRONT                       ; move the toolhead to the front
  M109 S{EXTRUDER_TEMP}       ; heat up the hotend
  M83                         ; set extruder to relative mode
  G1 E-8 F1800                ; quickly retract a small amount to elimate stringing
  G4 P200                     ; pause for a short amount of time
  G1 E-50 F300                ; retract slowly the rest of the way
  G1 E-20 F300
  M400                        ; wait for moves to finish
  M117 Unload Complete!

[gcode_macro LOAD_FILAMENT]
description: Loads new filament into toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  FRONT                       ; move the toolhead to the front
  M109 S{EXTRUDER_TEMP}       ; heat up the hotend
  M83                         ; set extruder to relative mode
  G1 E50 F300                 ; extrude slowlyL
  G1 E50 F300
  M400                        ; wait for moves to finish
  M117 Load Complete!
  SET_FILAMENT_SENSOR SENSOR=Filament_Runout_Sensor ENABLE=1

[gcode_macro CENTER]
description: Moves the toolhead to the center
gcode:
  CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y{x_center} F7800

[gcode_macro FRONT]
description: Moves the toolhead to the front
gcode:
  #CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y10 F7800

[gcode_macro NOZZLE_PURGE]
description: Draw a purge line at the front left edge of the build plate
gcode:
  CHOME
  G0 X2.5 Y4 F3000 ; Go to front
  G0 Z0.15 ; Drop to bed
  M83 ; Set extruder to relative mode
  G1 X45 E15 F500 ; Extrude 25mm of filament in a 4cm line
  G1 E-0.5 F400 ; Retract a little
  G1 X85 F4000 ; Quickly wipe away from the filament line
  G1 Z0.3 ; Raise and begin printing.
  
[gcode_macro M600]
gcode:
  PAUSE

[gcode_macro FAN_ON]
gcode:
  SET_FAN_SPEED FAN=hotend_fan SPEED=0.5
  SET_FAN_SPEED FAN=fan SPEED=0.5

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro G32]
gcode:
    G28 PROBE_LOCK=true
    Z_TILT_ADJUST
    DOCK_PROBE_UNLOCK

[gcode_macro PRIME_LINE]
gcode:
    G90                     # absolute positioning

    G1 X5 Y2 F10000         # Moves to starting point
    G1 Z2 F240

    G0 Z0.4                 # Raises Z to 0.4
    G91                     # Incremental positioning
    G1 E8                   # purge bubble
    G1 X80 E25 F400         # Purge line

    G90                     # absolute positioning
    G1 Z5 F3000             # move nozzle away from bed

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=Filament_Runout_Sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=Filament_Runout_Sensor ENABLE=1                          ; enable filament sensor

        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 70.695
#*# pid_ki = 1.215
#*# pid_kd = 1028.614
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 30.108
#*# pid_ki = 2.230
#*# pid_kd = 101.610
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 72.6
#*# shaper_type_y = ei
#*# shaper_freq_y = 73.4
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.042500, 0.005000, -0.010000
#*# 	-0.032500, 0.005000, -0.025000
#*# 	-0.060000, -0.002500, -0.035000
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 25.0
#*# max_x = 110.0
#*# min_y = 5.0
#*# max_y = 115.0
#*#
#*# [probe]
#*# z_offset = 17.275
